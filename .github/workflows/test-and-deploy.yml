# Test and Deploy Report Workflow
#
# This workflow runs Cypress tests, generates a Mochawesome HTML report,
# publishes screenshots for every test, and deploys both the report and a
# browsable screenshot gallery to GitHub Pages.
#
# Key Features:
# - Cleans up old artifacts before each run
# - Caches npm modules and Cypress binary for faster builds
# - Publishes screenshots as both downloadable artifacts and a web gallery
# - Uploads Cypress run log for easier debugging
# - Fails fast and checks for report existence to catch silent errors

name: Test and Deploy Report

on:
  # Trigger workflow on pushes to the Cypress branch
  push:
    branches:
      - EL-1-cypress

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    # Set permissions for GitHub Pages deployment
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      # Clean up previous test artifacts to ensure a fresh run
      - name: Clean previous artifacts
        run: rm -rf ./cypress/reports/html ./cypress/screenshots ./public

      # Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache npm modules and Cypress binary to speed up builds
      - name: Cache node modules and Cypress binary
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache/Cypress
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      # Set up Node.js (version 22 for compatibility with all dependencies)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Install npm dependencies
      - name: Install dependencies
        run: npm ci

      # Run Cypress tests and generate the Mochawesome report
      # Save the output to a log file for easier debugging if something fails
      - name: Run tests and generate report
        run: npm run test:functional | tee cypress-run.log

      # Upload Cypress run log as an artifact for post-mortem debugging
      - name: Upload Cypress run log
        uses: actions/upload-artifact@v4
        with:
          name: cypress-run-log
          path: cypress-run.log
          if-no-files-found: ignore

      # Prepare the HTML report and screenshots for deployment
      # Defensive scripting: check for existence before copying/moving
      - name: Prepare report and screenshots for Pages
        run: |
          set -euo pipefail
          mkdir -p ./public
          # Copy HTML report if it exists
          if [ -d ./cypress/reports/html ]; then
            cp -r ./cypress/reports/html/* ./public/
          fi
          # Rename report.html to index.html for default landing page
          if [ -f ./public/report.html ]; then mv ./public/report.html ./public/index.html; fi
          # Copy screenshots if they exist
          if [ -d ./cypress/screenshots ]; then cp -r ./cypress/screenshots ./public/; fi

      # Check for report existence and fail early if missing
      - name: Check for report
        run: |
          if [ ! -f ./public/index.html ]; then
            echo "‚ùå Report not found! Test run may have failed."
            exit 1
          fi

      # Generate a simple HTML gallery for all screenshots
      - name: Generate improved screenshot gallery with search
        run: cypress/support/generate-screenshot-gallery.sh

      # Upload screenshots as a downloadable artifact in the Actions UI
      - name: Upload Cypress screenshots as artifact
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          if-no-files-found: ignore

      # Set up GitHub Pages for deployment
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # Upload the prepared public directory as a Pages artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './public'

      # Deploy the artifact to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # Post a summary in the Actions UI with direct links to the report and gallery
      - name: Post summary with report and gallery links
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const url = `https://paul1404.github.io/elecalculate/`;
            const gallery = `https://paul1404.github.io/elecalculate/screenshots/index.html`;
            core.summary
              .addHeading('Test Report')
              .addLink('View HTML Report', url)
              .addLink('Screenshot Gallery', gallery)
              .write();