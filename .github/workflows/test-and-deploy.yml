# Test and Deploy Report Workflow
#
# This workflow runs Cypress tests, generates a Mochawesome HTML report,
# publishes screenshots for every test, and deploys both the report and a
# browsable screenshot gallery to GitHub Pages.
#
# Key Features:
# - Cleans up old artifacts before each run
# - Caches npm modules and Cypress binary for faster builds
# - Publishes screenshots as both downloadable artifacts and a web gallery
# - Posts summary links to the report and gallery in the Actions UI

name: Test and Deploy Report

on:
  # Trigger workflow on pushes to the Cypress branch
  push:
    branches:
      - EL-1-cypress

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    # Set permissions for GitHub Pages deployment
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      # Clean up previous test artifacts to ensure a fresh run
      - name: Clean previous artifacts
        run: rm -rf ./cypress/reports/html ./cypress/screenshots ./public

      # Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache npm modules and Cypress binary to speed up builds
      - name: Cache node modules and Cypress binary
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache/Cypress
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      # Set up Node.js (version 22 for compatibility with all dependencies)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Install npm dependencies
      - name: Install dependencies
        run: npm ci

      # Run Cypress tests and generate the Mochawesome report
      - name: Run tests and generate report
        run: npm run test:functional

      # Prepare the HTML report and screenshots for deployment
      - name: Prepare report and screenshots for Pages
        run: |
          mkdir -p ./public
          cp -r ./cypress/reports/html/* ./public/
          # Rename report.html to index.html for default landing page
          if [ -f ./public/report.html ]; then mv ./public/report.html ./public/index.html; fi
          # Copy screenshots if they exist
          if [ -d ./cypress/screenshots ]; then cp -r ./cypress/screenshots ./public/; fi

      # Generate a simple HTML gallery for all screenshots
      - name: Generate improved screenshot gallery with search
        run: |
          if [ -d ./public/screenshots ]; then
            cat <<EOF > ./public/screenshots/index.html
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <title>Cypress Screenshot Gallery</title>
        <style>
          body { font-family: sans-serif; background: #f8f8f8; color: #222; }
          h1 { text-align: center; }
          #search { display: block; margin: 20px auto 30px auto; padding: 8px; width: 60%; font-size: 1.1em; border-radius: 4px; border: 1px solid #bbb; }
          .spec-group { margin-bottom: 40px; }
          .spec-title { background: #e0e0e0; padding: 8px; font-size: 1.2em; border-radius: 4px; }
          .gallery { display: flex; flex-wrap: wrap; gap: 16px; margin-top: 12px; }
          .shot { background: #fff; border: 1px solid #ccc; border-radius: 4px; padding: 8px; width: 320px; box-shadow: 2px 2px 6px #ddd; }
          .shot img { max-width: 100%; border-radius: 2px; }
          .caption { font-size: 0.95em; color: #444; margin-top: 4px; word-break: break-all; }
          .hidden { display: none !important; }
        </style>
      </head>
      <body>
        <h1>Cypress Screenshot Gallery</h1>
        <input id="search" type="text" placeholder="Filter by test name or spec file...">
        <div id="gallery-root">
      EOF

            for spec in $(find ./public/screenshots -mindepth 1 -maxdepth 1 -type d | sort); do
              specname=$(basename "$spec")
              echo "<div class=\"spec-group\" data-spec=\"$specname\">" >> ./public/screenshots/index.html
              echo "<div class=\"spec-title\">$specname</div>" >> ./public/screenshots/index.html
              echo "<div class=\"gallery\">" >> ./public/screenshots/index.html
              for img in "$spec"/*.png; do
                imgfile=$(basename "$img")
                relpath="$specname/$imgfile"
                caption="${imgfile%.png}"
                # Add data attributes for filtering
                echo "<div class=\"shot\" data-caption=\"$caption\" data-spec=\"$specname\"><a href=\"$relpath\" target=\"_blank\"><img src=\"$relpath\" alt=\"$caption\"></a><div class=\"caption\">$caption</div></div>" >> ./public/screenshots/index.html
              done
              echo "</div></div>" >> ./public/screenshots/index.html
            done

            cat <<'EOF' >> ./public/screenshots/index.html
        </div>
        <script>
          const search = document.getElementById('search');
          search.addEventListener('input', function() {
            const val = this.value.toLowerCase();
            document.querySelectorAll('.shot').forEach(div => {
              const caption = div.getAttribute('data-caption').toLowerCase();
              const spec = div.getAttribute('data-spec').toLowerCase();
              if (caption.includes(val) || spec.includes(val)) {
                div.classList.remove('hidden');
              } else {
                div.classList.add('hidden');
              }
            });
            // Hide spec groups if all their shots are hidden
            document.querySelectorAll('.spec-group').forEach(group => {
              const shots = group.querySelectorAll('.shot');
              const anyVisible = Array.from(shots).some(div => !div.classList.contains('hidden'));
              group.style.display = anyVisible ? '' : 'none';
            });
          });
        </script>
      </body>
      </html>
      EOF
          fi

      # Upload screenshots as a downloadable artifact in the Actions UI
      - name: Upload Cypress screenshots as artifact
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          if-no-files-found: ignore

      # Set up GitHub Pages for deployment
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # Upload the prepared public directory as a Pages artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './public'

      # Deploy the artifact to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # Post a summary in the Actions UI with direct links to the report and gallery
      - name: Post summary with report and gallery links
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const url = `https://paul1404.github.io/elecalculate/`;
            const gallery = `https://paul1404.github.io/elecalculate/screenshots/index.html`;
            core.summary
              .addHeading('Test Report')
              .addLink('View HTML Report', url)
              .addLink('Screenshot Gallery', gallery)
              .write();